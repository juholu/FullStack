{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","PersonForm","props","onSubmit","addName","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","Person","person","name","number","onClick","deletePerson","Persons","filteredPersons","persons","filter","toLowerCase","includes","map","key","Filter","handleFilterChange","Notification","message","className","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","errorMessage","setErrorMessage","useEffect","personService","initialPersons","event","target","preventDefault","find","el","window","confirm","personObject","returnedPerson","setTimeout","alert","concat","pers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.040c7f9e.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst destroy = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, destroy }","import React, { useState, useEffect } from 'react'\r\nimport personService from './services/persons'\r\nimport './index.css'\r\n\r\nconst PersonForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.addName}>\r\n      <div>\r\n        name: <input \r\n        value={props.newName}\r\n        onChange={props.handleNameChange}\r\n      />\r\n      </div>\r\n      <div>\r\n        number: <input \r\n        value={props.newNumber}\r\n        onChange={props.handleNumberChange}\r\n      />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst Person = (props) => {\r\n  return (\r\n    <p>\r\n      {props.person.name} {props.person.number}\r\n      <button onClick={() => props.deletePerson(props.person)}>delete</button>\r\n    </p>\r\n  )\r\n}\r\n\r\nconst Persons = (props) => {\r\n  //Filter the persons objects\r\n  let filteredPersons = \r\n    props.persons.filter(person => \r\n    person.name.toLowerCase().includes(props.filter.toLowerCase()))\r\n  return (\r\n    <div>\r\n      {filteredPersons.map((person) => \r\n        <Person key={person.id} person={person} \r\n        deletePerson={props.deletePerson}/>\r\n      )}\r\n    </div>\r\n  )\r\n} \r\n\r\nconst Filter = (props) => {\r\n  return (\r\n    <div>\r\n      filter shown with <input \r\n      value={props.filter}\r\n      onChange={props.handleFilterChange}\r\n    />\r\n    </div>\r\n  )\r\n}\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([])\r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  const [ filter, setNewFilter] = useState('')\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  useEffect(() => {\r\n    personService\r\n      .getAll()\r\n      .then(initialPersons => {\r\n        setPersons(initialPersons)\r\n      })\r\n  }, [])\r\n\r\n  const addName = (event) => {\r\n    event.preventDefault()\r\n    let person = persons.find(el => el.name === newName)\r\n    if (person) {\r\n      if (person.number !== newNumber) {\r\n        if (window.confirm(`${person.name} is already added to phonebook, \r\n        replace the old number with a new one?`)) {\r\n          const personObject = {\r\n            name: newName, number: newNumber\r\n          }\r\n          let id = person.id\r\n          personService\r\n            .update(person.id, personObject)\r\n            .then(returnedPerson => {\r\n              setPersons(persons.map(person => person.id !== id ? person : returnedPerson))  \r\n              setErrorMessage(\r\n                `Updated ${person.name}`\r\n              )\r\n              setTimeout(() => {\r\n                setErrorMessage(null)\r\n              }, 5000)\r\n          })\r\n        }\r\n      }\r\n      else {\r\n        window.alert(`${newName} is already added to phonebook`)\r\n      }\r\n    }\r\n    else {\r\n      const personObject = {\r\n        name: newName, number: newNumber\r\n      }\r\n      personService\r\n        .create(personObject)\r\n        .then(returnedPerson => {\r\n          setPersons(persons.concat(returnedPerson))\r\n          setErrorMessage(\r\n            `Added ${newName}`\r\n          )\r\n          setTimeout(() => {\r\n            setErrorMessage(null)\r\n          }, 5000)\r\n        })\r\n    }\r\n    setNewName('')\r\n    setNewNumber('')\r\n  }\r\n  const deletePerson = (person) => {\r\n    let deletePerson = window.confirm(`Delete ${person.name} ?`) \r\n    if(deletePerson) {\r\n      let id = person.id\r\n      personService\r\n        .destroy(id)\r\n        .then(data => {\r\n          setPersons(persons.filter((pers) => pers.id != id))\r\n          setErrorMessage(\r\n            `Deleted ${person.name}`\r\n          )\r\n          setTimeout(() => {\r\n            setErrorMessage(null)\r\n          }, 5000)\r\n        })\r\n    }\r\n  }\r\n\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n  const handleFilterChange = (event) => {\r\n    setNewFilter(event.target.value)\r\n  }\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification message={errorMessage} />\r\n      <Filter filter ={filter} \r\n      handleFilterChange={handleFilterChange}/>\r\n      <h3>Add a new</h3>\r\n      <PersonForm \r\n        newName={newName} \r\n        newNumber={newNumber} \r\n        handleNameChange={handleNameChange} \r\n        handleNumberChange = {handleNumberChange}\r\n        addName = {addName}/>\r\n      <h2>Numbers</h2>\r\n      <Persons persons={persons} filter={filter} deletePerson={deletePerson}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}